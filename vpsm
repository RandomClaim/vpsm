#!/bin/bash
cd $VOID_PKGS

numcolorok=2
numcolorfail=1
numcolorlogo=5
numcolorheader=3
numcolortext=4
numcolorgray=2
numcolorpkgcount=8
numcolordarkgray=11
numcolorbrackets=6

getversion () {
  local fp=$(readlink -f "$0")
  (cd "${fp%/*}" && \
    git describe --all --debug --long --tags 2>/dev/null) || echo "UNKNOWN"
}

version=$(getversion)
progname=${0##*/}
verbose=false

# enable or disable colors based on the argument given, i.e.:
# setcolors on   # colors on
# setcolors off  # colors off
# setcolors auto # colors on or off depending on environment
declare -A COLORS
setcolors () {
  local opt=$1

  # determine if colors should be enabled or not
  if [[ $opt == auto ]]; then
    # if stdout is a TTY and the TERM looks like it supports color enable colors
    if [[ -t 1 && $TERM == *color* ]]; then
      opt='on'
    else
      opt='off'
    fi
  fi

  case "$opt" in
    on)
      local i
      for i in {1..11}; do
        if [[ -n ${COLORS[$i]} ]]; then
          continue
        fi
        COLORS[$i]=$(tput setaf "$i")
      done
      colorbrackets=${COLORS[$numcolorbrackets]}
      colordarkgray=${COLORS[$numcolordarkgray]}
      colorfail=${COLORS[$numcolorfail]}
      colorgray=${COLORS[$numcolorgray]}
      colorheader=${COLORS[$numcolorheader]}
      colorlogo=${COLORS[$numcolorlogo]}
      colorok=${COLORS[$numcolorok]}
      colorpkgcount=${COLORS[$numcolorpkgcount]}
      colortext=${COLORS[$numcolortext]}
      colorreset=$(tput sgr0)
    ;;
    off)
      colorbrackets=
      colordarkgray=
      colorfail=
      colorgray=
      colorheader=
      colorlogo=
      colorok=
      colorpkgcount=
      colortext=
      colorreset=
      unset COLORS
      declare -A COLORS
    ;;
    *)
      rmsg 255 "unknown color option: '$opt'"
      exit 255
    ;;
  esac
}

# print the logo with brackets colorized
getlogo () {
  printf '%s[%s%s%s]%s' \
    "$colorbrackets" \
    "$colorlogo" "$progname" \
    "$colorbrackets" \
    "$colorreset"
}

# prints a message (with vpsm-prefix)
msg () {
  local logo=$(getlogo)
  local newline=true

  if [[ $1 == '-n' ]]; then
    newline=false
    shift
  fi

  printf '%s %s%s%s' "$logo" "$colortext" "$*" "$colorreset"
  $newline && echo
}

# rmsg - same (but colorized based on return status passed via $1)
rmsg () {
  local code=$1
  shift

  local logo=$(getlogo)
  local statuscolor

  if ((code == 0)); then
    statuscolor=$colorok
  else
    statuscolor=$colorfail
  fi

  printf '%s %s%s%s\n' "$logo" "$statuscolor" "$*" "$colorreset"
}

banner () {
  echo -n "$colorlogo"
  echo ' __ ___ __ ____ __  ';

  printf " \ V / '_ (_-< '  \ "
  echo -n "$colorgray"
  echo "  $progname - void package source management utility for XBPS-SRC"
  echo -n "$colorlogo"
  echo -n '  \_/| .__/__/_|_|_|'
  echo -n "$colorgray"
  echo '  GitHub: https://github.com/sinetoami/vpsm'
  echo -n "$colorlogo"
  echo '     |/             '
  echo '     ´          '
  echo -n "$colorreset"
}

version () {
  banner
  msg "$progname - Version: $version"
  msg "Copyright (c) 2018 Sinésio Neto <sinetoami [at] gmail [dot] com> (GPLv3+)"
  msg "XBPS version: $(xbps-query -v --version | sed 's/GIT: UNSET//')"
}

# check if we have UID 0, exit otherwise
rootcheck () {
  if [[ $EUID -gt 0 ]]; then
    msg "ERROR: $progname: This operation needs super-user privileges. Exiting."
    exit 255
  fi
}

t () {
  if [[ -n $show_translations ]]; then
    tput setaf 242
    echo '                             ' "$@"
    echo
    tput setaf 109
  fi
}

wrapcommand() {
  local cmd ret
  cmd=("$@")

  echo "$colortext(${cmd[*]}):$colorreset"

  "${cmd[@]}"
  ret=$?

  rmsg "$ret" "[${cmd[*]}], return code was: $ret"
  exit "$ret"
}

usage () {
  echo
  version
  echo
  echo -n "$colorheader"
  echo "USAGE: "
  echo -n "$colorgray"
  echo "$progname [OPTIONS] [SUBCOMMANDS] [<ARGS>]"
  echo
  echo -n "$colorheader"
  # echo "OPTIONS: "
  # echo -n "$colorgray"
  # echo "--color=<yes|no|auto>        - Enable/Disable colorized output (default: auto)"
  # echo "--help                       - (same as: help)"
  # echo "--help-pager                 - (same as: helppager)"
  # echo "--show-translations          - Show XBPS command translations for $progname sub-commands"
  # echo "--verbose                    - Verbose mode (shows XBPS command translations during execution)"
  # echo
  echo -n "$colorheader"
  echo "SUBCOMMANDS: "
  echo -n "$colorgray"

  echo "show (sw)                    - Show information for the specified package."
  t "xbps-src show"
  echo "search (s)                   - Search for package by <name>."
  t "xbps-src"
  echo "bootstrap (bb)               - Install bootstrap packages from host repositories into <masterdir>."
  t "xbps-src binary-bootstrap"
  echo "bootstrap-up (bu)            - Updates bootstrap packages with latest versions" \
                                       "available from registered repositories in the XBPS" \
                                       "configuration file."
  t "xbps-src bootstrap-update"
  echo "install (i)                  - Build binary package for <pkgname> and all required dependencies and install."
  t "xbps-src pkg <pkg> && xbps-install --repository=.hostdir/... <pkg>"
  echo "list (l)                     - Lists installed packages in <masterdir>."
  t "xbps-src list"
  echo "pull                         - Update void-packages and sources repositories."
  t "git pull"
  # echo "sync                         - Synchronize remote repository data"
  # t "xbps-install -S"

  # echo "help                         - Show usage information"
  # echo "helppager (hp)               - Show usage information (will pipe output to less/more)"
  # echo
  # echo -n "$colorheader"
  # echo "XBPS COMPATIBILITY COOLNESS:"
  # echo -n "$colorgray"
  # f=(/usr/sbin/xbps-*)
  # echo "$progname also understands all unknown XBPS sub-commands, too:"
  # echo -n "Example: "
  # selected=${f[$RANDOM % ${#f[@]}]}
  # echo "$progname ${selected##*-} <ARGS> - see also: /usr/sbin/xbps-*"
  echo
  echo -n "$colorreset"
}

setcolors auto
case "$1" in
  --color=true|--color=yes|--color=on)
    setcolors on
    shift
  ;;
  --color=auto)
    setcolors auto
    shift
  ;;
  --color=false|--color=off|--color=no)
    setcolors off
    shift
  ;;
  --verbose=true)
    shift
    verbose=true
  ;;
  --show-translations)
    shift
    show_translations=1
  ;;
  --help)
    shift
    usage
    exit 255
  ;;
  --help-pager)
    shift
    "$0" --color=off --help | less
  ;;
  --*)
    msg "Unknown option: $1 (try: $progname --help)"
    exit 1
  ;;
esac

if [[ -z $1 ]]; then
  usage
  exit 0
fi

cmd=$1
if [[ $arg =~ --.* ]]; then
  cmd=${arg:2}
fi
shift

longest_word () {
  declare -a pkgs=$@
  declare -i longest=0
  for pkg in ${pkgs[@]}
  do
    if [ ${#pkg} -gt $longest ]; then
      longest=${#pkg}
    fi
  done

  echo $longest
}

whitespaces() {
  i=0
  space=" "
  qnt_ws=$(($1 - $2))

  while [[ "$i" != $qnt_ws ]]
  do
    space="$space "
    ((i+=1))
  done
  echo "$space"

}

show_desc () {
  ./xbps-src show "$1" | rg short_desc | awk '{$1=""; print $0}'
}

if_instaled () {
  [[ "$1" != '' ]] && flag="[$colorgray*$colorreset]" || flag="[-]"
  echo -n "$flag"
}

lsgrep_binpkgs () {
  ls $VOID_PKGS/hostdir/* | rg $1
}

check_binpkgs () {
  check=$(lsgrep_binpkgs "$1")
  resul=$(if_instaled $check)
  echo -n "$resul"
}

search_result () {
  declare -a res=()

  pkgs=$(ls $VOID_PKGS/srcpkgs | fzf --filter=$1 -e)
  lword=$(longest_word ${pkgs[@]})

  for pkg in ${pkgs[@]}
  do
    wsnum=$(whitespaces $lword ${#pkg})
    desc=$(show_desc $pkg)
    inststr=$(check_binpkgs $pkg)
    res+=("\n$inststr $pkg$wsnum-$desc")
  done

  echo -e "${res[@]}"
}

build_binary () {
  ./xbps-src pkg "$@" | \
  while read line
  do
    if [[ "$line" =~ Registering ]]; then
      echo "$line" | awk '{print $NF}' | cut -d'/' -f3-4 > xpath
    fi
    echo "$line"
  done
}

case "$cmd" in
  bootstrap|bb)
    msg -n "Create the bootstrap environment: "
    echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf
    wrapcommand ./xbps-src binary-bootstrap
  ;;

  bootstrap-up|bu)
    msg -n "Updates bootstrap packages: "
    wrapcommand ./xbps-src bootstrap-update
  ;;

  search|s)
    msg -n "Searching for: $* "
    wrapcommand search_result "$@"
  ;;

  show|sw)
    msg -n "Show information for: $* "
    wrapcommand ./xbps-src show "$@"
  ;;

  install|i)
    if (($# < 1)); then
      rmsg 255 "ERROR: install: argument missing, try --help."
      exit 1
    fi

    msg -n "Build binary package: $* "
    echo ''
    build_binary "$@"
    xpath=$(cat $VOID_PKGS/xpath)
    rm -rf $VOID_PKGS/xpath &> /dev/null

    msg -n "Installing packages: $* "
    wrapcommand sudo xbps-install -S --repository=$HOME/.void-packages/hostdir/$xpath "$@"
  ;;

  list|l)
    msg -n "Lists installed packages: "
    wrapcommand ./xbps-src list
  ;;

  pull)
    msg -n "Update repo: "
    wrapcommand git pull
  ;;
esac
