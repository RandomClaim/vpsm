#!/bin/bash
# vim: ft=sh ts=2 sw=2 sts=2 et

# vpm - void package management utility for
# XBPS, the X Binary Package System
# Copyright (c) 2016 Armin Jenewein <a@m2m.pm>, GitHub: @netzverweigerer
# For more information about XBPS, see:
# https://github.com/voidlinux/xbps

# Released under the terms of the GNU general public license, version 3+
# see LICENSE file for license information.

# VPM color definitions
numcolorok=2
numcolorfail=1
numcolorlogo=5
numcolorheader=3
numcolortext=4
numcolorgray=2
numcolorpkgcount=8
numcolordarkgray=11
numcolorbrackets=6

getversion () {
  local fp=$(readlink -f "$0")
  (cd "${fp%/*}" && \
    git describe --all --debug --long --tags 2>/dev/null) || echo "UNKNOWN"
}

version=$(getversion)
progname=${0##*/}
verbose=false

# enable or disable colors based on the argument given, i.e.:
# setcolors on   # colors on
# setcolors off  # colors off
# setcolors auto # colors on or off depending on environment
declare -A COLORS
setcolors () {
  local opt=$1

  # determine if colors should be enabled or not
  if [[ $opt == auto ]]; then
    # if stdout is a TTY and the TERM looks like it supports color enable colors
    if [[ -t 1 && $TERM == *color* ]]; then
      opt='on'
    else
      opt='off'
    fi
  fi

  case "$opt" in
    on)
      local i
      for i in {1..11}; do
        if [[ -n ${COLORS[$i]} ]]; then
          continue
        fi
        COLORS[$i]=$(tput setaf "$i")
      done
      colorbrackets=${COLORS[$numcolorbrackets]}
      colordarkgray=${COLORS[$numcolordarkgray]}
      colorfail=${COLORS[$numcolorfail]}
      colorgray=${COLORS[$numcolorgray]}
      colorheader=${COLORS[$numcolorheader]}
      colorlogo=${COLORS[$numcolorlogo]}
      colorok=${COLORS[$numcolorok]}
      colorpkgcount=${COLORS[$numcolorpkgcount]}
      colortext=${COLORS[$numcolortext]}
      colorreset=$(tput sgr0)
    ;;
    off)
      colorbrackets=
      colordarkgray=
      colorfail=
      colorgray=
      colorheader=
      colorlogo=
      colorok=
      colorpkgcount=
      colortext=
      colorreset=
      unset COLORS
      declare -A COLORS
    ;;
    *)
      rmsg 255 "unknown color option: '$opt'"
      exit 255
    ;;
  esac
}

# print the logo with brackets colorized
getlogo () {
  printf '%s[%s%s%s]%s' \
    "$colorbrackets" \
    "$colorlogo" "$progname" \
    "$colorbrackets" \
    "$colorreset"
}

# prints a message (with vpm-prefix)
msg () {
  local logo=$(getlogo)
  local newline=true

  if [[ $1 == '-n' ]]; then
    newline=false
    shift
  fi

  printf '%s %s%s%s' "$logo" "$colortext" "$*" "$colorreset"
  $newline && echo
}

# rmsg - same (but colorized based on return status passed via $1)
rmsg () {
  local code=$1
  shift

  local logo=$(getlogo)
  local statuscolor

  if ((code == 0)); then
    statuscolor=$colorok
  else
    statuscolor=$colorfail
  fi

  printf '%s %s%s%s\n' "$logo" "$statuscolor" "$*" "$colorreset"
}

banner () {
  echo -n "$colorlogo"
  echo ' __ ___ __ _ __  '

  printf " \\ V / '_ \\ '  \ "
  echo -n "$colorgray"
  echo "  $progname - void package management utility for XBPS"
  echo -n "$colorlogo"
  echo -n '  \_/| .__/_|_|_|'
  echo -n "$colorgray"
  echo '  GitHub: https://github.com/netzverweigerer/vpm'
  echo -n "$colorlogo"
  echo '     |/          '
  echo '     Â´          '
  echo -n "$colorreset"
}

version () {
  banner
  msg "$progname - Version: $version"
  msg "Copyright (c) 2016 Armin Jenewein <a@m2m.pm> (GPLv3+)"
  msg "XBPS version: $(xbps-query -v --version | sed 's/GIT: UNSET//')"
}

# check if we have UID 0, exit otherwise
rootcheck () {
  if [[ $EUID -gt 0 ]]; then
    msg "ERROR: $progname: This operation needs super-user privileges. Exiting."
    exit 255
  fi
}

t () {
  if [[ -n $show_translations ]]; then
    tput setaf 242
    echo '                             ' "$@"
    echo
    tput setaf 109
  fi
}

wrapcommand() {
  local cmd ret
  cmd=("$@")

  echo "$colortext(${cmd[*]}):$colorreset"

  "${cmd[@]}"
  ret=$?

  rmsg "$ret" "[${cmd[*]}], return code was: $ret"
  exit "$ret"
}

usage () {
  echo
  version
  echo
  echo -n "$colorheader"
  echo "USAGE: "
  echo -n "$colorgray"
  echo "$progname [OPTIONS] [SUBCOMMANDS] [<ARGS>]"
  echo
  echo -n "$colorheader"
  echo "OPTIONS: "
  echo -n "$colorgray"
  echo "--color=<yes|no|auto>        - Enable/Disable colorized output (default: auto)"
  echo "--help                       - (same as: help)"
  echo "--help-pager                 - (same as: helppager)"
  echo "--show-translations          - Show XBPS command translations for $progname sub-commands"
  echo "--verbose                    - Verbose mode (shows XBPS command translations during execution)"
  echo
  echo -n "$colorheader"
  echo "SUBCOMMANDS: "
  echo -n "$colorgray"
  echo "sync                         - Synchronize remote repository data"
  t "xbps-install -S"
  echo "update (up)                  - Update the system"
  t "xbps-install -Sduv"
  echo "listrepos (lr)               - List configured repositories"
  echo "repolist (rl)                - Alias for listrepos"
  t "xbps-query -v -L"
  echo "addrepo (ar) <ARGS>          - Add an additional repository"
  t "xbps-install <ARGS>"
  echo "info <pkg>                   - Show information about <package>"
  t "xbps-query-v -R"
  echo "filelist (fl) <pkg>          - Show file-list of <package>"
  t "xbps-query -v -R -f"
  echo "deps <pkg>                   - Show dependencies for <package>"
  t "xbps-query -v -R -x"
  echo "reverse (rv) <pkg>           - Show reverse dependendies of <package> (see man xbps-query)"
  t "xbps-query -v -R -X"
  echo "search (s) <name>            - Search for package by <name>"
  t "xbps-query -v -Rs"
  echo "searchfile (sf) <file>       - Search for package containing <file> (local)"
  t "xbps-query -v -o \"*/$1\""
  echo "list (ls)                    - List installed packages"
  t "xbps-query -v -l"
  echo "install (i) <pkg(s)>         - Install <package(s)>"
  t "xbps-install -S"
  echo "devinstall (di) <pkg(s)>     - Install <package> (and corresponding <package>-devel package(s))"
  t "xbps-install -S <package> <package>-devel"
  echo "listalternatives (la)        - List alternative candidates"
  t "xbps-alternatives -l"
  echo "setalternative (sa) <pkg(s)  - Set alternative for <package>"
  t "xbps-alternatives -s"
  echo "reconfigure (rc) <pkg>       - Re-configure installed <package>"
  t "xbps-reconfigure -v"
  echo "forceinstall (fi) <pkg(s)>   - Force installation of <package(s)>"
  t "xbps-install -f"
  echo "remove <package(s))          - Remove <package(s)> from the system"
  t "xbps-remove -v "
  echo "removerecursive <pkg(s)>     - Recursively remove package(s) (and its dependencies)"
  t "xbps-remove -v -R"
  echo "cleanup (cl)                 - Clean up cache directory"
  t "xbps-remove -v -O"
  echo "autoremove (ar)              - Remove orphaned packages"
  t "xbps-remove -v -O"
  echo "whatprovides (wp) <file>     - Search for package containing <file>"
  t "xlocate <pkg>"
  echo "help                         - Show usage information"
  echo "helppager (hp)               - Show usage information (will pipe output to less/more)"
  echo
  echo -n "$colorheader"
  echo "XBPS COMPATIBILITY COOLNESS:"
  echo -n "$colorgray"
  f=(/usr/sbin/xbps-*)
  echo "$progname also understands all unknown XBPS sub-commands, too:"
  echo -n "Example: "
  selected=${f[$RANDOM % ${#f[@]}]}
  echo "$progname ${selected##*-} <ARGS> - see also: /usr/sbin/xbps-*"
  echo
  echo -n "$colorreset"
}

setcolors auto
case "$1" in
  --color=true|--color=yes|--color=on)
    setcolors on
    shift
  ;;
  --color=auto)
    setcolors auto
    shift
  ;;
  --color=false|--color=off|--color=no)
    setcolors off
    shift
  ;;
  --verbose=true)
    shift
    verbose=true
  ;;
  --show-translations)
    shift
    show_translations=1
  ;;
  --help)
    shift
    usage
    exit 255
  ;;
  --help-pager)
    shift
    "$0" --color=off --help | less
  ;;
  --*)
    msg "Unknown option: $1 (try: $progname --help)"
    exit 1
  ;;
esac

if [[ -z $1 ]]; then
  usage
  exit 0
fi

cmd=$1
if [[ $arg =~ --.* ]]; then
  cmd=${arg:2}
fi
shift

longest_word () {
  longest=""
  for word in ${pkgs[@]}
  do
    if [ ${#word} -gt ${#longest} ] ; then
      longest=$word
    fi
  done

  echo $longest
}


whitespaces() {
  i=0
  space=" "
  while [[ "$i" != $1 ]]
  do
    space="$space "
    ((i+=1))
  done
  echo "$space"
}

show_desc () {
  cd $VOID_PKGS
  ./xbps-src show "$1" | grep short_desc | awk '{$1=""; print $0}' | awk '{$1=$1};1'
}

check_binpkgs () {
  s=$(xbps-query --repository=$HOME/.void-packages/hostdir/binpkgs/nonfree -Rs $1 | awk '{print $1}')
  echo "$s"
}

search_result () {
  declare -a res=()

  pkgs=$(ls $(echo "$VOID_PKGS/srcpkgs") | fzf --filter=$1 -e)
  lword=$(longest_word $pkgs)

  for pkg in ${pkgs[@]}
  do
    qs=$((${#lword} - ${#pkg}))
    snum=$(whitespaces $qs)
    desc=$(show_desc $pkg)
    # inststr=$(check_binpkgs "$pkg")
    # res+=("\n$inststr $pkg$snum - $desc")
    res+=("\n$pkg$snum - $desc")
  done

  echo -e "${res[@]}"
}

case "$cmd" in
  bootstrap|bb)
    # cd $VOID_PKGS
    msg -n "Create the bootstrap environment: "
    wrapcommand ./xbps-src binary-bootstrap
    echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf
  ;;

  search|s)
    msg -n "Searching for: $* "
    wrapcommand search_result "$@"
  ;;

  show|sw)
    cd $VOID_PKGS
    msg -n "Show information for: $* "
    wrapcommand ./xbps-src show "$@"
  ;;

  install|i)
    cd $VOID_PKGS
    if (($# < 1)); then
      rmsg 255 "ERROR: install: argument missing, try --help."
      exit 1
    fi

    msg -n "Building packages: $* "
    echo ''
    ./xbps-src pkg $*

    msg -n "Installing packages: $* "
    wrapcommand sudo xbps-install -S --repository=$HOME/.void-packages/hostdir/binpkgs/nonfree "$@"
  ;;
esac
