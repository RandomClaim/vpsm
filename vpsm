#!/bin/bash
export VOID_PKGS=$HOME/.void-packages
export VOID_SRCPKGS=$VOID_PKGS/srcpkgs
export VOID_HOSTDIR=$VOID_PKGS/hostdir
export VOID_BINPKGS=$VOID_HOSTDIR/binpkgs

cd $VOID_PKGS

numcolorok=2
numcolorfail=1
numcolorlogo=5
numcolorheader=3
numcolortext=4
numcolorgray=2
numcolorpkgcount=8
numcolordarkgray=11
numcolorbrackets=6

getversion () {
  local fp=$(readlink -f "$0")
  (cd "${fp%/*}" && \
    git describe --all --debug --long --tags 2>/dev/null) || echo "UNKNOWN"
}

version=$(getversion)
progname=${0##*/}
verbose=false

# enable or disable colors based on the argument given, i.e.:
# setcolors on   # colors on
# setcolors off  # colors off
# setcolors auto # colors on or off depending on environment
declare -A COLORS
setcolors () {
  local opt=$1

  # determine if colors should be enabled or not
  if [[ $opt == auto ]]; then
    # if stdout is a TTY and the TERM looks like it supports color enable colors
    if [[ -t 1 && $TERM == *color* ]]; then
      opt='on'
    else
      opt='off'
    fi
  fi

  case "$opt" in
    on)
      local i
      for i in {1..11}; do
        if [[ -n ${COLORS[$i]} ]]; then
          continue
        fi
        COLORS[$i]=$(tput setaf "$i")
      done
      colorbrackets=${COLORS[$numcolorbrackets]}
      colordarkgray=${COLORS[$numcolordarkgray]}
      colorfail=${COLORS[$numcolorfail]}
      colorgray=${COLORS[$numcolorgray]}
      colorheader=${COLORS[$numcolorheader]}
      colorlogo=${COLORS[$numcolorlogo]}
      colorok=${COLORS[$numcolorok]}
      colorpkgcount=${COLORS[$numcolorpkgcount]}
      colortext=${COLORS[$numcolortext]}
      colorreset=$(tput sgr0)
    ;;
    off)
      colorbrackets=
      colordarkgray=
      colorfail=
      colorgray=
      colorheader=
      colorlogo=
      colorok=
      colorpkgcount=
      colortext=
      colorreset=
      unset COLORS
      declare -A COLORS
    ;;
    *)
      rmsg 255 "unknown color option: '$opt'"
      exit 255
    ;;
  esac
}

# print the logo with brackets colorized
getlogo () {
  printf '%s[%s%s%s]%s' \
    "$colorbrackets" \
    "$colorlogo" "$progname" \
    "$colorbrackets" \
    "$colorreset"
}

# prints a message (with vpsm-prefix)
msg () {
  local logo=$(getlogo)
  local newline=true

  if [[ $1 == '-n' ]]; then
    newline=false
    shift
  fi

  printf '%s %s%s%s' "$logo" "$colortext" "$*" "$colorreset"
  $newline && echo
}

# rmsg - same (but colorized based on return status passed via $1)
rmsg () {
  local code=$1
  shift

  local logo=$(getlogo)
  local statuscolor

  if ((code == 0)); then
    statuscolor=$colorok
  else
    statuscolor=$colorfail
  fi

  printf '%s %s%s%s\n' "$logo" "$statuscolor" "$*" "$colorreset"
}

banner () {
  echo -n "$colorlogo"
  echo ' __ ___ __ ____ __  ';

  printf " \ V / '_ (_-< '  \ "
  echo -n "$colorgray"
  echo "  $progname - void package source management utility for XBPS-SRC"
  echo -n "$colorlogo"
  echo -n '  \_/| .__/__/_|_|_|'
  echo -n "$colorgray"
  echo '  GitHub: https://github.com/sinetoami/vpsm'
  echo -n "$colorlogo"
  echo '     |/             '
  echo '     ´          '
  echo -n "$colorreset"
}

version () {
  banner
  msg "$progname - Version: $version"
  msg "Copyright (c) 2018 Sinésio Neto <sinetoami [at] gmail [dot] com> (GPLv3+)"
  msg "XBPS version: $(xbps-query -v --version | sed 's/GIT: UNSET//')"
}

t () {
  if [[ -n $show_translations ]]; then
    tput setaf 242
    echo '                             ' "$@"
    echo
    tput setaf 109
  fi
}

wrapcommand() {
  local cmd ret
  cmd=("$@")

  echo "$colortext(${cmd[*]}):$colorreset"

  "${cmd[@]}"
  ret=$?

  rmsg "$ret" "[${cmd[*]}], return code was: $ret"
  exit "$ret"
}

usage () {
  # echo
  version
  echo
  echo -n "$colorheader"
  echo "USAGE: "
  echo -n "$colorgray"
  echo "$progname [OPTIONS] [SUBCOMMANDS] [<ARGS>]"
  echo
  echo -n "$colorheader"
  echo "SUBCOMMANDS: "
  echo -n "$colorgray"
  echo "binbootstrap (bb)            - Install bootstrap packages from host repositories into <masterdir>."
  echo "bootstrap-up (bu)            - Updates bootstrap packages with latest versions" \
                                      "available from registered repositories in the XBPS" \
                                      "configuration file."
  echo "build-environment            - Configure environment to create binary packages."
  echo "build-deps (swbd)            - Show required build dependencies for <pkgname>."
  echo "install (i)                  - Build binary package for <pkgname> and all required dependencies and install."
  echo "list (l)                     - Lists installed packages in <masterdir>."
  echo "pkg                          - Only build binary package for <pkgname> and all required dependencies."
  echo "pull                         - Update void-packages and sources repositories."
  echo "purge-distfiles (pdistf)     - Removes all obsolete distfiles in <hostdir>/sources."
  echo "search (s)                   - Search for package by <name>."
  echo "show (sw)                    - Show information for the specified package."
  echo "uninstall (un)               - Uninstall and purge distfiles for <pkgname>."
	echo
	echo -n "$colorreset"
}

setcolors auto
case "$1" in
  --color=true|--color=yes|--color=on)
    setcolors on
    shift
  ;;
  --color=auto)
    setcolors auto
    shift
  ;;
  --color=false|--color=off|--color=no)
    setcolors off
    shift
  ;;
  --verbose=true)
    shift
    verbose=true
  ;;
  --show-translations)
    shift
    show_translations=1
  ;;
  --help)
    shift
    usage
    exit 255
  ;;
  --help-pager)
    shift
    "$0" --color=off --help | less
  ;;
  --*)
    msg "Unknown option: $1 (try: $progname --help)"
    exit 1
  ;;
esac

if [[ -z $1 ]]; then
  usage
  exit 0
fi

cmd=$1
if [[ $arg =~ --.* ]]; then
  cmd=${arg:2}
fi
shift

current_branch=$(git rev-parse --abbrev-ref HEAD)
template_path=$VOID_PKGS/srcpkgs/$@/template

build_binary () {
  ./xbps-src pkg "$@" | \
  while read line
  do
    if [[ "$line" =~ Registering ]]; then
      echo "$line" | awk '{print $NF}' | cut -d'/' -f3-4 > xpath
      echo -n "$colorgray"
      echo "$line"
      echo -n "$colorreset"
    else
      echo "$line"
    fi
  done
}

xgensum_config() {
  xgensum -f $1 | \
  while read line
  do
    if [[ "$line" =~ checksum= ]]; then
      sed -i "s/^checksum=.*$/$line/g" $template_path
    fi
    echo "$line"
  done
}

addrepos() {
  check_repos=$(find $VOID_BINPKGS/* -type d)
  declare -a repos
  for repo in ${check_repos[@]}
  do
    if ! [[ "$repo" =~ repodata ]];then
      repos+="--repository=$repo "
    fi
  done

  echo "${repos[@]}"
}

case "$cmd" in

  # clone repo with ssh
  # git@github.com:sinetoami/void-packages.git

  binbootstrap|bb)
    msg -n "Create the bootstrap environment: "
    echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf
    wrapcommand ./xbps-src binary-bootstrap
  ;;

  bootstrap-up|bu)
    msg -n "Updates bootstrap packages: "
    wrapcommand ./xbps-src bootstrap-update
  ;;

	build-environment)
    whoami=$(whoami)
    sudo xbps-install xtools

    msg "XBPS_CHROOT_CMD=uchroot >> etc/conf"
    echo XBPS_CHROOT_CMD=uchroot >> etc/conf

    cd /usr/bin
    msg "chown root:xbuilder xbps-uchroot"
    sudo chown root:xbuilder xbps-uchroot
    msg "chmod 4750 xbps-uchroot"
    sudo chmod 4750 xbps-uchroot
    msg "usermod -a -G xbuilder $whoami"
    sudo usermod -a -G xbuilder $whoami

    cd $OLDPWD
    msg "add void-linux/void-packages track repository"
    git remote add void-linux git://github.com/void-linux/void-packages.git
    msg "git pull void-linux master"
    git pull void-linux master
	;;

  build-deps|swbd)
    msg -n "Show required build dependencies for: $*"
    wrapcommand ./xbps-src show-build-deps "$@"
  ;;

  install|i)
    if (($# < 1)); then
      rmsg 255 "ERROR: install: argument missing, try --help."
      exit 1
    fi

    msg -n "Build binary package: $* "
    echo ''
    build_binary "$@"
    xpath=$(cat $VOID_PKGS/xpath)

    if [ "$xpath" == '' ]; then
      rmsg 255 "ERROR: can't found repository to $* package."
      exit 1
    fi

    rm -rf $VOID_PKGS/xpath &> /dev/null
    msg -n "Installing packages: $* "
    wrapcommand sudo xbps-install -S --repository=$VOID_HOSTDIR/$xpath "$@"
  ;;

  list|l)
    msg -n "Lists installed packages: "
    wrapcommand ./xbps-src list
  ;;

  pkg)
    msg -n "Build binary package for: $* "
    wrapcommand ./xbps-src pkg "$@"
  ;;

  pull)
    msg -n "Update repo: "
    wrapcommand git pull
  ;;

  purge-distfiles|pdistf)
    msg -n "Removes all obsolete distfiles in $VOID_HOSTDIR/sources"
    wrapcommand ./xbps-src purge-distfiles
  ;;

  search|s)
    repos=$(addrepos)
    msg -n "Searching for: $* "
    wrapcommand xbps-query $repos -Rs "$@"
  ;;

  show|sw)
    msg -n "Show information for: $* "
    wrapcommand ./xbps-src show "$@"
  ;;

  uninstall|un)
    shopt -s globstar

    msg "Remove package and purge distfiles: $* "
    sudo xbps-remove -v -R "$@"
    rm -rf $VOID_BINPKGS/**/*$@*

    shopt -u globstar
  ;;

  update-repo|upr)
    msg "Update void-packages from void-linux remote master"
    git pull void-linux master
    msg "Push commits to my own repo"
    git push -u origin $current_branch
  ;;

  update-sys|ups)
    msg "Rebuilds packages in system and updates them."
    wrapcommand ./xbps-src update-sys
  ;;

  xgsum)
    msg -n "Generate/Update SHA256 sum in: $@/template "
    wrapcommand xgensum_config $template_path
  ;;

  edit-template|edtp)
    exec $EDITOR $template_path
  ;;

  add-commit-new-pkg|anp)
    msg "Add new package to repository: branch -> $current_branch"
    git add .
    wrapcomand git commit -m "New package: $@"
  ;;

  push-commit|pc)
    msg "Push commit to repository: branch -> $current_branch"
    wrapcomman git push -u origin $current_branch
  ;;
esac
